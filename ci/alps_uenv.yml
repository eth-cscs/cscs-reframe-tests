include:
  - remote: 'https://gitlab.com/cscs-ci/recipes/-/raw/master/templates/v2/.ci-ext.yml'

stages:
  - pull
  - run
  - notify
  # - status

setup and pull:
  stage: pull
  extends: .f7t-baremetal-runner
  timeout: 8 hours
  variables:
    SLURM_TIMELIMIT: '00:10:00'
    # Valid MODE=('container-runner', 'baremetal', 'f7t-controller')
  before_script:
    - echo "FIRECREST_SYSTEM=$FIRECREST_SYSTEM / F7T_URL=$F7T_URL / CLUSTER_NAME=$CLUSTER_NAME"
    - pwd
    - uname -a
    # - ./ci/scripts/alps.sh setup_uenv_and_oras &> setup_uenv_and_oras.log
    # - source ./uenv-5.1.0/bin/activate-uenv
    - uenv --version
    # - export PATH=$PWD:$UENV_PREFIX/libexec:$PATH
    # - uenv-oras version
    - imgs=$(./ci/scripts/alps.sh uenv_image_find)
  script: |
    echo "imgs=$imgs"
    unset UENVA
    # uenv repo create
    uenv repo status
    for img in $imgs; do
      ./ci/scripts/alps.sh uenv_pull_meta_dir "$img" &> .rc
      ./ci/scripts/alps.sh meta_has_reframe_yaml "$img" &> .rc
      cat .rc
      rc=$(grep -q OK .rc ; echo $?)
      echo "rc=$rc"
      if [ $rc -eq 0 ] ; then
        UENVA+="$img,"
        echo "UENVA=$UENVA"
      fi
    done
    UENVA=${UENVA%?}
    UENV=`echo ${UENVA} | sed 's-,,-,-g' | sort -u`
    echo "UENV=$UENV" > rfm_uenv.env
    cat rfm_uenv.env | tr , "\n"
  artifacts:
    reports:
      dotenv: rfm_uenv.env

reframe:
  stage: run
  extends: .f7t-baremetal-runner
  timeout: 8 hours
  needs: ['setup and pull']
  rules:
    - if: '$BENCHER_API_TOKEN == null'
      variables:
        SLURM_TIMELIMIT: '02:00:00'
    - if: '$BENCHER_API_TOKEN'
      variables:
        SLURM_TIMELIMIT: '00:20:00'
  before_script:
    - echo "FIRECREST_SYSTEM=$FIRECREST_SYSTEM / F7T_URL=$F7T_URL / CLUSTER_NAME=$CLUSTER_NAME"
    - uname -a
    - pwd
    # - ./ci/scripts/alps.sh setup_uenv_and_oras &> setup_uenv_and_oras.log
    # - source ./uenv-5.1.0/bin/activate-uenv
    - uenv --version
    - echo "UENV=$UENV" | tr , "\n"
    # Send data to elastic on main branch only
    - '[ "$CI_COMMIT_REF_NAME" != "main" ] && unset RFM_HTTPJSON_URL'
  script:
    - hostname
    - rfm_path=$(./ci/scripts/alps.sh install_reframe)
    - echo "rfm_path=$rfm_path"
    - export PATH=$rfm_path:$PATH
    - reframe -V
    - |
      if [ -z "${BENCHER_API_TOKEN+x}" ]; then
        # BENCHER_API_TOKEN is UNDEFINED
        # 
        # https://docs.gitlab.com/ci/jobs/job_rules/#ci_pipeline_source-predefined-variable
        # CI_PIPELINE_SOURCE=api - PR
        # CI_PIPELINE_SOURCE=schedule - CRON
        echo "CI_PIPELINE_SOURCE=$CI_PIPELINE_SOURCE"
        if [ "$CI_PIPELINE_SOURCE" = "api" ]; then
          # run only the tests modified in the current PR
          tests_pr=$(git diff --name-only origin/main |grep checks |grep py$ |awk '{printf "-c %s ",$0}');
          echo "tests_pr=$tests_pr";
          ./ci/scripts/alps.sh launch_reframe_1arg "$tests_pr";
        else
          ./ci/scripts/alps.sh launch_reframe_1arg "--mode daily_production"
      else
        # BENCHER_API_TOKEN is defined (even if empty)
        ./ci/scripts/alps.sh launch_reframe_bencher
      fi
  artifacts:
    when: always
    paths:
      - reframe.out
      - report.xml
      - latest.json
    reports:
      junit: report.xml

# status_page:
#   stage: status
#   needs: ['reframe']
#   extends: .container-runner-lightweight-zen2
#   image: python:3.9
#   script:
#     - pwd
#     - ls -a
#     - pip install requests
#     - ./ci/scripts/alps.sh oneuptime "$FIRECREST_SYSTEM" "uenv"
#   when: always

notify_slack:
  stage: notify
  needs: ['reframe']
  extends: .container-runner-lightweight-zen2
  image: python:3.9
  script:
    - pwd
    - ls -a
    - pip install requests
    - python ./ci/scripts/slack_notify.py latest.json uenv
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
      when: always
    - when: never
